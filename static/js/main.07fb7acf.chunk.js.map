{"version":3,"sources":["components.js","App.js","index.js"],"names":["InfoDialog","props","title","children","open","setOpen","Dialog","fullWidth","style","width","onClose","aria-labelledby","maxWidth","DialogTitle","id","DialogContent","DialogActions","Button","variant","onClick","color","App","useState","list","setList","infoOpen","setInfoOpen","displayedInfo","setDispInfo","urls","setUrls","labels","setLabels","search","query","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","a","json","data","console","log","ok","error","message","status","Promise","reject","catch","renderItem","item","i","Grid","container","direction","justify","xs","src","url","height","objectFit","Typography","display","join","copy","splice","del","useEffect","alignItems","spacing","Object","entries","map","value","align","paragraph","whiteSpace","TextField","label","rows","multiline","onChange","e","u","target","split","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07fb7acf.chunk.js","sourcesContent":["import {Button, Dialog, DialogActions, DialogContent, DialogTitle} from \"@material-ui/core\";\r\n\r\nexport function InfoDialog (props) {\r\n\r\n    const { title, children, open, setOpen } = props;\r\n    return (\r\n        <Dialog fullWidth\r\n                style={{width: 800}}\r\n            open={open}\r\n            onClose={() => setOpen(false)}\r\n            aria-labelledby=\"confirm-dialog\"\r\n            maxWidth={false}\r\n        >\r\n            <DialogTitle id=\"confirm-dialog\">{title}</DialogTitle>\r\n            <DialogContent>{children}</DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => setOpen(false)}\r\n                    color=\"default\"\r\n                >\r\n                    Close\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import React, {useEffect, useState} from \"react\";\nimport {Button, Grid, TextField, Typography} from \"@material-ui/core\";\nimport {InfoDialog} from \"./components\";\n\nfunction App() {\n\n    const [list, setList] = useState([])\n    const [infoOpen, setInfoOpen] = useState(false)\n    const [displayedInfo, setDispInfo] = useState({})\n    const [urls, setUrls] = useState([])\n    const [labels, setLabels] = useState([])\n\n    useEffect(() => {\n        search({\n            \"field\": \"context\",\n            \"value\": null,\n            \"op\": \"==\"\n        })\n    }, [])\n\n    function search(query) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(query)\n        };\n        fetch('https://stormy-wildwood-04842.herokuapp.com/search', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n                console.log(data)\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n\n                setList(data)\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n    }\n\n    function upload() {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({urls})\n        };\n        fetch('https://stormy-wildwood-04842.herokuapp.com/upload', requestOptions)\n            .then(async response => {\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = response.status;\n                    return Promise.reject(error);\n                }\n                search({\n                    \"field\": \"context\",\n                    \"value\": null,\n                    \"op\": \"==\"\n                })\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n    }\n\n    function del(id, i) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({id})\n        };\n        fetch('https://stormy-wildwood-04842.herokuapp.com/delete', requestOptions)\n            .then(async response => {\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = response.status;\n                    return Promise.reject(error);\n                }\n                const copy = [...list]\n                copy.splice(i, 1)\n                setList(copy)\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n    }\n\n    function renderItem(item, i) {\n        return <Grid item container direction={\"row\"} justify={\"space-between\"} key={item + i}>\n            <Grid item xs={1}>\n                <img src={item.url} height={200} width={200} style={{objectFit: \"cover\"}}/>\n            </Grid>\n            <Grid item container direction={\"column\"} xs={6}>\n                <Grid item>\n\n                    <Typography variant={\"body1\"} display={\"inline\"}>\n                        <b>Labels: </b> {item.labels.join(', ')}\n\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Button onClick={() => {\n                        setDispInfo(item)\n                        setInfoOpen(true)\n                    }}>\n                        View info\n                    </Button>\n                </Grid>\n            </Grid>\n            <Grid item>\n                <Button style={{color: 'red'}} onClick={() => {del(item.id, i)}}>\n                    Delete\n                </Button>\n            </Grid>\n        </Grid>\n    }\n\n    return (\n        <Grid container direction={\"column\"} alignItems={\"center\"} spacing={2}>\n            <InfoDialog\n                title={\"Info\"}\n                open={infoOpen}\n                setOpen={setInfoOpen}\n            >\n                <Grid container direction={\"column\"}>\n                    {Object.entries(displayedInfo).map((value,i) => {\n                            return <Grid container direction={\"row\"} justify={\"center\"} spacing={2} key={value + i}>\n                                <Grid item xs={5}>\n                                    <Typography variant={\"body2\"} align={\"right\"}>\n                                        {value[0]}\n                                    </Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Typography>\n                                        :\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={5}>\n                                    <Typography variant={\"body2\"} paragraph style={{whiteSpace: 'pre-line'}}>\n                                        {JSON.stringify(value[1], null, 2)}\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        }\n                    )}\n\n                </Grid>\n\n            </InfoDialog>\n            <Grid item>\n                <Typography variant={\"h5\"}>\n                    Images\n                </Typography>\n            </Grid>\n\n            <Grid item container direction={\"row\"} alignItems={\"center\"} justify={\"space-between\"}>\n                <Grid item xs={3}>\n                    <TextField\n                        label={'search by labels (separated by newline)'}\n                        fullWidth\n                        rows={5}\n                        multiline\n                        onChange={e => {\n                            const u = e.target.value.split('\\n')\n                            console.log(u)\n                            setLabels(u)\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Button onClick={() => {\n                        search({\n                            \"field\": \"labels\",\n                            \"value\": labels,\n                            \"op\": \"array-contains-any\"\n                        })\n                    }}>\n                        Search\n                    </Button>\n                </Grid>\n                <Grid item xs={6}>\n                    <TextField\n                        label={'img URLS (separated by newline)'}\n                        fullWidth\n                        multiline\n                        rows={5}\n                        onChange={e => {\n                            const u = e.target.value.split('\\n')\n                            console.log(u)\n                            setUrls(u)\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Button onClick={upload}>\n                        Upload\n                    </Button>\n                </Grid>\n            </Grid>\n            <Grid item>\n\n            </Grid>\n\n            {list.map((item, i) => renderItem(item, i))}\n        </Grid>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}