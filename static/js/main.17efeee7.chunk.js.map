{"version":3,"sources":["App.js","index.js"],"names":["App","useState","list","setList","field","op","value","useEffect","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","a","json","data","console","log","ok","error","message","status","Promise","reject","catch","getAll","Grid","container","direction","alignItems","spacing","item","Typography","map","justify","src","url","height","width","style","objectFit","labels","renderItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAuEeA,MApEf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGeF,mBAAS,CAACG,MAAO,GAAIC,GAAI,GAAIC,MAAO,KAHnD,mBAmDb,OAnDa,UAKbC,qBAAU,YAIV,WACE,IAAMC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnB,MAAS,UACT,MAAS,KACT,GAAM,QAGVC,MAAM,qDAAsDN,GACvDO,KADL,uCACU,WAAMC,GAAN,iBAAAC,EAAA,sEACeD,EAASE,OADxB,UACEC,EADF,OAEJC,QAAQC,IAAIF,GAEPH,EAASM,GAJV,uBAMIC,EAASJ,GAAQA,EAAKK,SAAYR,EAASS,OAN/C,kBAOKC,QAAQC,OAAOJ,IAPpB,OAUJpB,EAAQgB,GAVJ,2CADV,uDAaKS,OAAM,SAAAL,GACLH,QAAQG,MAAM,sBAAuBA,MA3B3CM,KACC,IA6CD,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAW,SAAUC,WAAY,SAAUC,QAAS,EAApE,UACI,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAAV,SACI,cAACC,EAAA,EAAD,uBAKJ,cAACN,EAAA,EAAD,CAAMK,MAAI,EAACJ,WAAS,EAACC,UAAW,QAI/B9B,EAAKmC,KAAI,SAAAF,GAAI,OA1BpB,SAAoBA,GAChB,OAAO,eAACL,EAAA,EAAD,CAAMK,MAAI,EAACJ,WAAS,EAACC,UAAW,MAAOM,QAAS,gBAAhD,UACH,cAACR,EAAA,EAAD,CAAMK,MAAI,EAAV,SACI,qBAAKI,IAAKJ,EAAKK,IAAKC,OAAQ,IAAKC,MAAO,IAAKC,MAAO,CAACC,UAAW,aAEpE,cAACd,EAAA,EAAD,CAAMK,MAAI,EAAV,SACKA,EAAKU,SAEV,cAACf,EAAA,EAAD,CAAMK,MAAI,OAkBMW,CAAWX,UC9DrCY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.17efeee7.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Grid, Typography} from \"@material-ui/core\";\n\nfunction App() {\n\n  const [list, setList] = useState([])\n  const [params, setParams] = useState({field: \"\", op: \"\", value: \"\"})\n\n  useEffect(() => {\n    getAll()\n  }, [])\n\n  function getAll() {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        \"field\": \"context\",\n        \"value\": null,\n        \"op\": \"==\"\n      })\n    };\n    fetch('https://stormy-wildwood-04842.herokuapp.com/search', requestOptions)\n        .then(async response => {\n          const data = await response.json();\n          console.log(data)\n          // check for error response\n          if (!response.ok) {\n            // get error message from body or default to response status\n            const error = (data && data.message) || response.status;\n            return Promise.reject(error);\n          }\n\n          setList(data)\n        })\n        .catch(error => {\n          console.error('There was an error!', error);\n        });\n  }\n\n  function renderItem(item) {\n      return <Grid item container direction={\"row\"} justify={\"space-between\"}>\n          <Grid item>\n              <img src={item.url} height={200} width={200} style={{objectFit: \"cover\"}}/>\n          </Grid>\n          <Grid item>\n              {item.labels}\n          </Grid>\n          <Grid item>\n\n          </Grid>\n      </Grid>\n  }\n\n  return (\n    <Grid container direction={\"column\"} alignItems={\"center\"} spacing={2}>\n        <Grid item>\n            <Typography>\n                Images\n            </Typography>\n        </Grid>\n\n        <Grid item container direction={\"row\"}>\n\n        </Grid>\n\n        {list.map(item => renderItem(item))}\n    </Grid>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}