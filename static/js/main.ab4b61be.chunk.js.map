{"version":3,"sources":["components.js","App.js","index.js"],"names":["InfoDialog","props","title","children","open","setOpen","Dialog","fullWidth","style","width","onClose","aria-labelledby","maxWidth","DialogTitle","id","DialogContent","DialogActions","Button","variant","onClick","color","App","useState","list","setList","field","op","value","infoOpen","setInfoOpen","displayedInfo","setDispInfo","useEffect","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","a","json","data","console","log","ok","error","message","status","Promise","reject","catch","getAll","Grid","container","direction","alignItems","spacing","Object","entries","map","i","justify","item","xs","Typography","align","paragraph","whiteSpace","src","url","height","objectFit","display","labels","join","renderItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab4b61be.chunk.js","sourcesContent":["import {Button, Dialog, DialogActions, DialogContent, DialogTitle} from \"@material-ui/core\";\r\n\r\nexport function InfoDialog (props) {\r\n\r\n    const { title, children, open, setOpen } = props;\r\n    return (\r\n        <Dialog fullWidth\r\n                style={{width: 800}}\r\n            open={open}\r\n            onClose={() => setOpen(false)}\r\n            aria-labelledby=\"confirm-dialog\"\r\n            maxWidth={false}\r\n        >\r\n            <DialogTitle id=\"confirm-dialog\">{title}</DialogTitle>\r\n            <DialogContent>{children}</DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => setOpen(false)}\r\n                    color=\"default\"\r\n                >\r\n                    Close\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import React, {useEffect, useState} from \"react\";\nimport {Button, Grid, Typography} from \"@material-ui/core\";\nimport {InfoDialog} from \"./components\";\n\nfunction App() {\n\n    const [list, setList] = useState([])\n    const [params, setParams] = useState({field: \"\", op: \"\", value: \"\"})\n    const [infoOpen, setInfoOpen] = useState(false)\n    const [displayedInfo, setDispInfo] = useState({})\n    const [urls, setUrls] = useState([])\n\n    useEffect(() => {\n        getAll()\n    }, [])\n\n    function getAll() {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                \"field\": \"context\",\n                \"value\": null,\n                \"op\": \"==\"\n            })\n        };\n        fetch('https://stormy-wildwood-04842.herokuapp.com/search', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n                console.log(data)\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n\n                setList(data)\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n    }\n\n    function upload() {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({urls})\n        };\n        fetch('https://stormy-wildwood-04842.herokuapp.com/upload', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n                console.log(data)\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n\n                setList(data)\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n    }\n\n    function renderItem(item, i) {\n        return <Grid item container direction={\"row\"} justify={\"space-between\"} key={item + i}>\n            <Grid item xs={1}>\n                <img src={item.url} height={200} width={200} style={{objectFit: \"cover\"}}/>\n            </Grid>\n            <Grid item container direction={\"column\"} xs={6}>\n                <Grid item>\n\n                    <Typography variant={\"body1\"} display={\"inline\"}>\n                        <b>Labels: </b> {item.labels.join(', ')}\n\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Button onClick={() => {\n                        setDispInfo(item)\n                        setInfoOpen(true)\n                    }}>\n                        View info\n                    </Button>\n                </Grid>\n            </Grid>\n            <Grid item>\n                {/*todo*/}\n                {/*<Button style={{color: 'red'}}>*/}\n                {/*    Delete*/}\n                {/*</Button>*/}\n            </Grid>\n        </Grid>\n    }\n\n    return (\n        <Grid container direction={\"column\"} alignItems={\"center\"} spacing={2}>\n            <InfoDialog\n                title={\"Info\"}\n                open={infoOpen}\n                setOpen={setInfoOpen}\n            >\n                <Grid container direction={\"column\"}>\n                    {Object.entries(displayedInfo).map((value,i) => {\n                            return <Grid container direction={\"row\"} justify={\"center\"} spacing={2} key={value + i}>\n                                <Grid item xs={5}>\n                                    <Typography variant={\"body2\"} align={\"right\"}>\n                                        {value[0]}\n                                    </Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Typography>\n                                        :\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={5}>\n                                    <Typography variant={\"body2\"} paragraph style={{whiteSpace: 'pre-line'}}>\n                                        {JSON.stringify(value[1], null, 2)}\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        }\n                    )}\n\n                </Grid>\n\n            </InfoDialog>\n            <Grid item>\n                <Typography variant={\"h5\"}>\n                    Images\n                </Typography>\n            </Grid>\n\n            <Grid item container direction={\"row\"}>\n\n            </Grid>\n\n            {list.map((item, i) => renderItem(item, i))}\n        </Grid>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}